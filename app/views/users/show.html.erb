<section id='mypage'>

    <p><%= image_tag @user.image_url %></p>
    <p class="name"><%= @user.name %>
       <% if current_user.id == @user.id %>
          <%= link_to edit_user_registration_path(id: @user.id) do %>
            <i class="fas fa-cog"></i>
          <% end %>
       <% end %>
   　　<%= render "relationships/follow_button", user: @user %>
  　</p>
    <p><%= @user.followers.count %></p>
    <p class="profile"><%= @user.profile %></p> 
    
  

<div class="tab_wrap">
	<input id="tab1" type="radio" name="tab_btn" checked>
  <% if current_user.id == @user.id %>
  <input id="tab2" type="radio" name="tab_btn">
  <input id="tab3" type="radio" name="tab_btn">
  <% end %>

	<div class="tab_area">
		<label class="tab1_label" for="tab1"><i class="fas fa-images"></i></label>
    <label class="tab2_label" for="tab2"><i class="far fa-heart"></i></label>
    <label class="tab3_label" for="tab3"><i class="fas fa-route"></i></label>
  </div>
	 <div class="panel_area">
		<div id="panel1" class="tab_panel">
      <% @user.spots.each do |t| %>
          <a href="/spots/<%= t.id %>"><%= image_tag t.image_url %>
          </a> 
      <% end %>
    </div>
  
		<div id="panel2" class="tab_panel">
         <% @likes.each do |like| %>
           <a href="/spots/<%= like.spot_id %>"><%= image_tag like.spot.image_url, size: "250x200" if like.spot.image? %>
           </a>
         <% end %>
    </div>

    <div id="panel3" class="tab_panel">     
    　<div>
       <input type="button" value="車" id='driving'>
       <input type="button" value="電車" id='train'>
       <input type="button" value="徒歩" id='walking'>
      </div>　

       <div id="map">
       </div>
        
         <form id="search">
           <div id='location-list'>
             <input type='text' id='startPosition'placeholder='スタート地点' required>
             <input type='text' id='endPosition' placeholder='ゴール地点' required>
           </div>
           <button id='add'>経由地を追加</button>
           <input type='submit' value='検索'>
         </form>
        
       <p>いいねした場所</p>  
       <% @likes.each do |like| %>
         <%= like.spot.address %>
       <% end %>
    </div>
  </div>
</div>
</section>


<script>
function initMap(){
  const directionsService = new google.maps.DirectionsService();
  const directionsRenderer = new google.maps.DirectionsRenderer();
  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 7,
    center: { lat: 35.47, lng: 139.59 }, //神奈川県の某大学
  });
  directionsRenderer.setMap(map);
  drop(map)
  const onChangeHandler =  async function (event) {
   await getPosition(directionsService, directionsRenderer);
   event.preventDefault();
  };
  document.getElementById("search").addEventListener("submit", onChangeHandler);
}
const getPosition = async (directionsService, directionsRenderer) => {
  const start = document.getElementById('startPosition')
  const end = document.getElementById('endPosition')
  const via_forms = Array.from(document.querySelectorAll(".via"))
  const waypoints = via_forms.map((spot) => {
    return {
      "location": spot.value,
      "stopover": false
     }
  })
  calculateAndDisplayRoute(directionsService, directionsRenderer,start,end,waypoints);
}
function calculateAndDisplayRoute(directionsService, directionsRenderer,start,end,waypoints) {
  directionsService.route(
    {
      origin:  start.value,
      destination: end.value,
      waypoints: waypoints,
      travelMode: google.maps.TravelMode.DRIVING,
    },
    (response, status) => {
      if (status === "OK") {
        directionsRenderer.setDirections(response);
      } else {
        window.alert("Directions request failed due to " + status);
      }
    }
  );
}
const addSpot = () => {
  const destination_form = document.getElementById('endPosition')
  const how_many = document.getElementById('location-list').children.length
  const input = document.createElement('input')
  input.placeholder ='経由地名を入力'
  input.required = true
  input.classList.add('via')
  input.id = 'via' + how_many
  destination_form.before(input)
}
function drop(map) {
  for (const address of  gon.liked_addresses) {
    setTimeout(function() {
      addMarkerMethod(address,map);
    }, 200);
  }
}
const addMarkerMethod = async (address,map) => {
    geocoder = new google.maps.Geocoder()
    await geocoder.geocode( { 'address': address }, function(results, status) {
    if (status == 'OK') {
      var marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
      });
        marker = new google.maps.Marker({
    map,
    draggable: true,
    animation: google.maps.Animation.DROP,
    position: results[0].geometry.location
  });
  marker.addListener("click", toggleBounce);
  function toggleBounce() {
  if (marker.getAnimation() !== null) {
    marker.setAnimation(null);
  } else {
    marker.setAnimation(google.maps.Animation.BOUNCE);
  }
}
    } else {
      alert('該当する結果がありませんでした：' + status);
    }
  }); 
}
document.getElementById("add").addEventListener('click',addSpot)
console.log(gon.liked_addresses)
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?&key=<%= ENV['GOOGLE_MAP_API'] %>&callback=initMap"></script>
